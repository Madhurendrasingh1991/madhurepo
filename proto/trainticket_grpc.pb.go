// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: trainticket.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TrainTicket_BookTicket_FullMethodName = "/trainticket.grpc.TrainTicket/BookTicket"
)

// TrainTicketClient is the client API for TrainTicket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainTicketClient interface {
	BookTicket(ctx context.Context, in *BookTicketRequest, opts ...grpc.CallOption) (*BookTicketResponse, error)
}

type trainTicketClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainTicketClient(cc grpc.ClientConnInterface) TrainTicketClient {
	return &trainTicketClient{cc}
}

func (c *trainTicketClient) BookTicket(ctx context.Context, in *BookTicketRequest, opts ...grpc.CallOption) (*BookTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookTicketResponse)
	err := c.cc.Invoke(ctx, TrainTicket_BookTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainTicketServer is the server API for TrainTicket service.
// All implementations must embed UnimplementedTrainTicketServer
// for forward compatibility
type TrainTicketServer interface {
	BookTicket(context.Context, *BookTicketRequest) (*BookTicketResponse, error)
	mustEmbedUnimplementedTrainTicketServer()
}

// UnimplementedTrainTicketServer must be embedded to have forward compatible implementations.
type UnimplementedTrainTicketServer struct {
}

func (UnimplementedTrainTicketServer) BookTicket(context.Context, *BookTicketRequest) (*BookTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookTicket not implemented")
}
func (UnimplementedTrainTicketServer) mustEmbedUnimplementedTrainTicketServer() {}

// UnsafeTrainTicketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainTicketServer will
// result in compilation errors.
type UnsafeTrainTicketServer interface {
	mustEmbedUnimplementedTrainTicketServer()
}

func RegisterTrainTicketServer(s grpc.ServiceRegistrar, srv TrainTicketServer) {
	s.RegisterService(&TrainTicket_ServiceDesc, srv)
}

func _TrainTicket_BookTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketServer).BookTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicket_BookTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketServer).BookTicket(ctx, req.(*BookTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainTicket_ServiceDesc is the grpc.ServiceDesc for TrainTicket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainTicket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trainticket.grpc.TrainTicket",
	HandlerType: (*TrainTicketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookTicket",
			Handler:    _TrainTicket_BookTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trainticket.proto",
}
